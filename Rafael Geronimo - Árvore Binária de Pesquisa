package br.com.binary_tree.model;

public class Main {
    public static void main(String[] args) {
        ArvoreBinariaBusca arvore = new ArvoreBinariaBusca();

        // Inserindo elementos na árvore
        arvore.inserir(10);
        arvore.inserir(5);
        arvore.inserir(15);
        arvore.inserir(2);
        arvore.inserir(8);
        arvore.inserir(22);

        // Imprimindo a árvore
        arvore.mostrar();
        System.out.println();

        // Inserindo mais um elemento e imprimindo novamente
        arvore.inserir(25);
        arvore.mostrar();
        System.out.println();

        // Removendo um elemento e imprimindo novamente
        arvore.remover(5);
        arvore.mostrar();
        System.out.println();

        // Buscando um elemento
        NoArvore noEncontrado = arvore.buscar(22);
        if (noEncontrado != null) {
            System.out.println("O nó com chave 22 foi encontrado!");
        } else {
            System.out.println("O nó com chave 22 não foi encontrado!");
        }
    }
}

package br.com.binary_tree.model;

public class NoArvore {
    int chave;
    NoArvore esquerda;
    NoArvore direita;

    public NoArvore(int chave) {
        this.chave = chave;
        this.esquerda = null;
        this.direita = null;
    }
}

package br.com.binary_tree.model;

public class ArvoreBinariaBusca {
    private NoArvore raiz;

    public ArvoreBinariaBusca() {
        this.raiz = null;
    }

    public void inserir(int chave) {
        this.raiz = inserirRecursivo(this.raiz, chave);
    }

    private NoArvore inserirRecursivo(NoArvore no, int chave) {
        if (no == null) {
            return new NoArvore(chave);
        }

        if (chave < no.chave) {
            no.esquerda = inserirRecursivo(no.esquerda, chave);
        } else if (chave > no.chave) {
            no.direita = inserirRecursivo(no.direita, chave);
        }

        return no;
    }

    public void remover(int chave) {
        this.raiz = removerRecursivo(this.raiz, chave);
    }

    private NoArvore removerRecursivo(NoArvore no, int chave) {
        if (no == null) {
            return null;
        }

        if (chave == no.chave) {
            if (no.esquerda == null) {
                return no.direita;
            } else if (no.direita == null) {
                return no.esquerda;
            } else {
                NoArvore sucessor = buscarMenor(no.direita);
                no.chave = sucessor.chave;
                no.direita = removerRecursivo(no.direita, sucessor.chave);
            }
        } else if (chave < no.chave) {
            no.esquerda = removerRecursivo(no.esquerda, chave);
        } else {
            no.direita = removerRecursivo(no.direita, chave);
        }

        return no;
    }

    private NoArvore buscarMenor(NoArvore no) {
        NoArvore atual = no;

        while (atual.esquerda != null) {
            atual = atual.esquerda;
        }

        return atual;
    }

    public NoArvore buscar(int chave) {
        return buscarRecursivo(this.raiz, chave);
    }

    private NoArvore buscarRecursivo(NoArvore no, int chave) {
        if (no == null || no.chave == chave) {
            return no;
        }

        if (chave < no.chave) {
            return buscarRecursivo(no.esquerda, chave);
        } else {
            return buscarRecursivo(no.direita, chave);
        }
    }

    public void mostrar() {
        mostrarRecursivo(this.raiz, 0);
    }

    private void mostrarRecursivo(NoArvore no, int nivel) {
        if (no == null) {
            return;
        }

        // imprime a subárvore da direita
        mostrarRecursivo(no.direita, nivel + 1);

        // imprime o nó atual
        for (int i = 0; i < nivel; i++) {
            System.out.print("\t");
        }
        System.out.println(no.chave);

        // imprime a subárvore da esquerda
        mostrarRecursivo(no.esquerda, nivel + 1);
    }

}